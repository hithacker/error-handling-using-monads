<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1482158308519">{:repl-history {:ide [], :local [&quot;(+ 2 3)&quot; &quot;(order-clj.handler/fetch-order-lines \&quot;order1\&quot;)&quot; &quot;(order-clj.handler/fetch-order-lines \&quot;order2\&quot;)&quot; &quot;(order-clj.handler/get-order \&quot;11\&quot;)&quot; &quot;(order-clj.handler/get-order \&quot;11\&quot; \&quot;1\&quot;)&quot; &quot;(dissoc nil :_id :customerOrgId)&quot; &quot;(dissoc {} :_id :customerOrgId)&quot; &quot;(maybe/just 1)&quot; &quot;(maybe/just nil)&quot; &quot;(require '[cats.core :as m])\n(require '[cats.builtin])&quot; &quot;(m/mappend (maybe/just [1 2 3])\n           (maybe/nothing))&quot; &quot;(m/mappend (maybe/just [1 2 3])\n           (maybe/nothing)\n           (maybe/just [4 5 6]))&quot; &quot;(m/mappend (maybe/just [1 2 3])\n           (maybe/nothing)\n           (maybe/just [4 5 6])\n           (maybe/nothing))&quot; &quot;(order-clj.handler/get-orders \&quot;11\&quot;)&quot; &quot;(order-clj.handler/get-orders \&quot;12\&quot;)&quot; &quot;(order-clj.handler/get-order \&quot;11\&quot; \&quot;order2\&quot;)&quot; &quot;(order-clj.handler/get-order \&quot;11\&quot; \&quot;order1\&quot;)&quot; &quot;(require '[cats.core :as m])&quot; &quot;(require '[cats.builtin])&quot; &quot;(require '[cats.monad.maybe])&quot; &quot;(require '[cats.monad.maybe :as maybe])&quot; &quot;(just 2)&quot; &quot;(maybe/just 3)&quot; &quot;(maybe/nothing)&quot; &quot;(if (&gt; 3 4) \&quot;3&gt;4\&quot; \&quot;3&lt;=4\&quot;)&quot; &quot;(if (&gt; 4 4) \&quot;3&gt;4\&quot; \&quot;3&lt;=4\&quot;)&quot; &quot;(if (&gt; 5 4) \&quot;3&gt;4\&quot; \&quot;3&lt;=4\&quot;)&quot; &quot;(defn mfind-order [order-id]\n  (cond\n    (= order-id 1) (right {:orderId order-id :price 50.0 :status \&quot;CONFIRMED\&quot;})\n    (= order-id 2) (right {:orderId order-id :price 50.0 :status \&quot;DRAFT\&quot;})\n    :else (left {:status 404 :message \&quot;Order not found\&quot;})))&quot; &quot;(order-clj.handler/mfind-order 34)&quot; &quot;(order-clj.handler/mfind-order 3)&quot; &quot;(order-clj.handler/mfind-order 30)&quot; &quot;(order-clj.handler/mfind-order 1)&quot; &quot;(order-clj.handler/mfind-order 2)&quot; &quot;(m/fmap inc (maybe/just 1))&quot; &quot;(m/fmap inc (maybe/nothing))&quot; &quot;(require '[order-clj.handler :as orders])&quot; &quot;(orders/mfind-order 30)&quot; &quot;(orders/mcreate-orderline {:status \&quot;CO\&quot;})&quot; &quot;(orders/mcreate-orderline {:status \&quot;CONFIRMED\&quot;})&quot; &quot;(orders/mcreate-orderline {:status \&quot;REJECTED\&quot;})&quot; &quot;(orders/mcreate-orderline {:status \&quot;DR\&quot;})&quot; &quot;(m/fmap orders/mcreate-orderline (orders/mfind-order 34))&quot; &quot;(deref (m/fmap orders/mcreate-orderline (orders/mfind-order 1)))&quot; &quot;(deref (m/fmap orders/mcreate-orderline (orders/mfind-order 2)))&quot; &quot;(deref (m/fmap orders/mcreate-orderline (orders/mfind-order 3)))&quot; &quot;(m/fmap orders/mcreate-orderline (orders/mfind-order 1))&quot; &quot;(m/fmap orders/mcreate-orderline (orders/mfind-order 2))&quot; &quot;(m/fmap orders/mcreate-orderline (orders/mfind-order 3))&quot; &quot;(m/apply orders/mcreate-orderline (orders/mfind-order 2))&quot; &quot;(m/fapply orders/mcreate-orderline (orders/mfind-order 2))&quot; &quot;(m/fapply (orders/mcreate-orderline) (orders/mfind-order 2))&quot; &quot;(orders/mfind-order 2)&quot; &quot;(orders/mcreate-orderline {:status \&quot;DRAFT\&quot;})&quot; &quot;(orders/mcreate-orderline {:status \&quot;DRAF\&quot;})&quot; &quot;(orders/mfind-order 3)&quot; &quot;(orders/mfind-order 1)&quot; &quot;(m/mlet [a (orders/mfind-order 23)\n         b (orders/mcreate-orderline a)] \n        (m/return b))&quot; &quot;(m/mlet [a (orders/mfind-order 1)\n         b (orders/mcreate-orderline a)] \n        (m/return b))&quot; &quot;(m/mlet [a (orders/mfind-order 2)\n         b (orders/mcreate-orderline a)] \n        (m/return b))&quot; &quot;(orders/create-orderline 1)&quot; &quot;(orders/create-orderline 2)&quot; &quot;(orders/create-orderline 3)&quot;], :remote []}}</component>
</project>